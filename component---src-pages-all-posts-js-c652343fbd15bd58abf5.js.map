{"version":3,"file":"component---src-pages-all-posts-js-c652343fbd15bd58abf5.js","mappings":"qJA8BA,IA3Be,SAAHA,GAAcA,EAARC,SAAeD,EAALE,MAAuB,IAAhBC,EAAQH,EAARG,SAmBjC,OACEC,EAAAA,cAAA,OAAKC,UAAU,kBAEbD,EAAAA,cAAA,YAAOD,GAGb,C,+CCjBMG,EAAM,SAAHN,GAAgD,IAADO,EAAAC,EAAAC,EAAzCC,EAAWV,EAAXU,YAAmBR,GAAFF,EAAJW,KAAWX,EAALE,OAAOC,EAAQH,EAARG,SAC/BS,GAASC,EAAAA,EAAAA,gBAAe,cAAxBD,KAmCFE,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAgC,QAApBT,EAAGK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBL,MAExC,OACEE,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQY,EAAkBd,EAAK,MAAMc,EAAiBd,GACtDE,EAAAA,cAAA,QAAMa,KAAK,cAAcC,QAASJ,IAClCV,EAAAA,cAAA,QAAMe,SAAS,WAAWD,QAAShB,IACnCE,EAAAA,cAAA,QAAMe,SAAS,iBAAiBD,QAASJ,IACzCV,EAAAA,cAAA,QAAMe,SAAS,UAAUD,QAAQ,YACjCd,EAAAA,cAAA,QAAMa,KAAK,eAAeC,QAAQ,YAClCd,EAAAA,cAAA,QACEa,KAAK,kBACLC,SAA0B,QAAjBV,EAAAI,EAAKG,oBAAY,IAAAP,GAAQ,QAARC,EAAjBD,EAAmBY,cAAM,IAAAX,OAAR,EAAjBA,EAA2BY,QAAQC,WAAQ,KAEtDlB,EAAAA,cAAA,QAAMa,KAAK,gBAAgBC,QAAShB,IACpCE,EAAAA,cAAA,QAAMa,KAAK,sBAAsBC,QAASJ,IACzCX,EAGP,EAEAG,EAAIiB,aAAe,CACjBb,YAAY,IAQd,K,0ECjDA,UAvBqB,SAAHV,GAA4B,IAAtBwB,EAAIxB,EAAJwB,KAAMvB,EAAQD,EAARC,SACtBwB,EAAQD,EAAKE,kBAAkBC,MACrC,OACEvB,EAAAA,cAACwB,EAAAA,EAAM,CAAC3B,SAAUA,GAChBG,EAAAA,cAACE,EAAAA,EAAG,CAACJ,MAAK,SAAY,IAEtBE,EAAAA,cAAA,kBAAiB,IACjBA,EAAAA,cAAA,UACGqB,EAAMI,KAAI,SAAAC,GACT,OACE1B,EAAAA,cAAA,MAAI2B,IAAKD,EAAKE,OAAOC,MACnB7B,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAE,GAAKL,EAAKE,OAAOC,MACvB7B,EAAAA,cAAA,UAAK0B,EAAKM,YAAYlC,OACtBE,EAAAA,cAAA,SAAI0B,EAAKM,YAAYC,OAI7B,KAIR,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/all-posts.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  // const isRootPath = location.pathname === rootPath\n  // let header\n\n  // if (isRootPath) {\n  //   header = (\n  //     <h1 className=\"main-heading\">\n  //       <Link to=\"/\">{title}</Link>\n  //     </h1>\n  //   )\n  // } else {\n  //   header = (\n  //     <Link className=\"header-link-home\" to=\"/\">\n  //       {title}\n  //     </Link>\n  //   )\n  // }\n\n  return (\n    <div className=\"global-wrapper\">\n      {/* <header className=\"global-header\">{header}</header> */}\n      <main>{children}</main>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter {\n                title\n                url\n                username\n              }\n              github {\n                title\n                url\n                username\n              }\n              instagram {\n                title\n                url\n                username\n              }\n              email {\n                title\n                url\n                username\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter.username || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nSeo.defaultProps = {\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { graphql, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst CategoryPost = ({ data, location }) => {\n  const posts = data.allMarkdownRemark.nodes\n  return (\n    <Layout location={location}>\n      <Seo title={`전체보기`} /> {/* 페이지 title 수정 */}\n      {/* <Bio /> */}\n      <h3>{`전체보기`}</h3> {/* 현재 카테고리 표시 */}\n      <ol>\n        {posts.map(node => {\n          return (\n            <li key={node.fields.slug}>\n              <Link to={`${node.fields.slug}`}>\n                <h2>{node.frontmatter.title}</h2>\n                <p>{node.frontmatter.date}</p>\n              </Link>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default CategoryPost\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { contentType: { eq: \"blog\" } } }\n      sort: { order: DESC, fields: frontmatter___date }\n    ) {\n      nodes {\n        fields {\n          slug\n        }\n        excerpt\n        timeToRead\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          description\n          title\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","location","title","children","React","className","Seo","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","lang","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","username","defaultProps","data","posts","allMarkdownRemark","nodes","Layout","map","node","key","fields","slug","Link","to","frontmatter","date"],"sourceRoot":""}
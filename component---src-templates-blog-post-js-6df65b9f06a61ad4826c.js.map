{"version":3,"file":"component---src-templates-blog-post-js-6df65b9f06a61ad4826c.js","mappings":"qJA8BA,IA3Be,SAAHA,GAAcA,EAARC,SAAeD,EAALE,MAAuB,IAAhBC,EAAQH,EAARG,SAmBjC,OACEC,EAAAA,cAAA,OAAKC,UAAU,kBAEbD,EAAAA,cAAA,YAAOD,GAGb,C,+CCjBMG,EAAM,SAAHN,GAAgD,IAADO,EAAAC,EAAAC,EAAzCC,EAAWV,EAAXU,YAAmBR,GAAFF,EAAJW,KAAWX,EAALE,OAAOC,EAAQH,EAARG,SAC/BS,GAASC,EAAAA,EAAAA,gBAAe,cAAxBD,KAmCFE,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAgC,QAApBT,EAAGK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBL,MAExC,OACEE,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQY,EAAkBd,EAAK,MAAMc,EAAiBd,GACtDE,EAAAA,cAAA,QAAMa,KAAK,cAAcC,QAASJ,IAClCV,EAAAA,cAAA,QAAMe,SAAS,WAAWD,QAAShB,IACnCE,EAAAA,cAAA,QAAMe,SAAS,iBAAiBD,QAASJ,IACzCV,EAAAA,cAAA,QAAMe,SAAS,UAAUD,QAAQ,YACjCd,EAAAA,cAAA,QAAMa,KAAK,eAAeC,QAAQ,YAClCd,EAAAA,cAAA,QACEa,KAAK,kBACLC,SAA0B,QAAjBV,EAAAI,EAAKG,oBAAY,IAAAP,GAAQ,QAARC,EAAjBD,EAAmBY,cAAM,IAAAX,OAAR,EAAjBA,EAA2BY,QAAQC,WAAQ,KAEtDlB,EAAAA,cAAA,QAAMa,KAAK,gBAAgBC,QAAShB,IACpCE,EAAAA,cAAA,QAAMa,KAAK,sBAAsBC,QAASJ,IACzCX,EAGP,EAEAG,EAAIiB,aAAe,CACjBb,YAAY,IAQd,K,6GClBac,EAAO,SAAHC,GAA4C,IAAdC,EAAID,EAA5BE,KAAQC,eAC7B,OACExB,EAAAA,cAACE,EAAAA,EAAG,CACFJ,MAAOwB,EAAKG,YAAY3B,MACxBQ,YAAagB,EAAKG,YAAYnB,aAAegB,EAAKI,SAGxD,EAEA,UA/DyB,SAAH9B,GAGf,IAADO,EAAAwB,EAAA/B,EAFJ2B,KAAQK,EAAQD,EAARC,SAAUC,EAAIF,EAAJE,KAAMrB,EAAImB,EAAJnB,KAAsBc,EAAIK,EAApBH,eAC9B3B,EAAQD,EAARC,SAEMiC,GAA6B,QAAjB3B,EAAAK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBL,QAAK,QAE1C,OACEE,EAAAA,cAAC+B,EAAAA,EAAM,CAAClC,SAAUA,EAAUC,MAAOgC,GACjC9B,EAAAA,cAAA,WACEC,UAAU,YACV+B,WAAS,EACTC,SAAS,6BAETjC,EAAAA,cAAA,cACEA,EAAAA,cAAA,MAAIkC,SAAS,YAAYZ,EAAKG,YAAY3B,OAC1CE,EAAAA,cAAA,SAAIsB,EAAKG,YAAYU,OAEvBnC,EAAAA,cAAA,WACAA,EAAAA,cAAA,WACEoC,wBAAyB,CAAEC,OAAQf,EAAKgB,MACxCJ,SAAS,gBAEXlC,EAAAA,cAAA,YAEFA,EAAAA,cAAA,OAAKC,UAAU,iBACbD,EAAAA,cAAA,MACEuC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX5C,EAAAA,cAAA,UACG4B,GACC5B,EAAAA,cAAC6C,EAAAA,KAAI,CAACC,GAAIlB,EAASmB,OAAOC,KAAMC,IAAI,QAAO,KACtCrB,EAASH,YAAY3B,QAI9BE,EAAAA,cAAA,UACG6B,GACC7B,EAAAA,cAAC6C,EAAAA,KAAI,CAACC,GAAIjB,EAAKkB,OAAOC,KAAMC,IAAI,QAC7BpB,EAAKJ,YAAY3B,MAAM,SAQxC,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  // const isRootPath = location.pathname === rootPath\n  // let header\n\n  // if (isRootPath) {\n  //   header = (\n  //     <h1 className=\"main-heading\">\n  //       <Link to=\"/\">{title}</Link>\n  //     </h1>\n  //   )\n  // } else {\n  //   header = (\n  //     <Link className=\"header-link-home\" to=\"/\">\n  //       {title}\n  //     </Link>\n  //   )\n  // }\n\n  return (\n    <div className=\"global-wrapper\">\n      {/* <header className=\"global-header\">{header}</header> */}\n      <main>{children}</main>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter {\n                title\n                url\n                username\n              }\n              github {\n                title\n                url\n                username\n              }\n              instagram {\n                title\n                url\n                username\n              }\n              email {\n                title\n                url\n                username\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter.username || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nSeo.defaultProps = {\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <hr />\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["_ref","location","title","children","React","className","Seo","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","lang","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","username","defaultProps","Head","_ref2","post","data","markdownRemark","frontmatter","excerpt","_ref$data","previous","next","siteTitle","Layout","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}